package wta_problem;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Random;

public class Population 
{
	private static int nTargets;
	private static int nWeapon;
	private static int nWeaponType;
	private static int nPopulation;
	private static int nParents;
	private static int nIterations;
	
	private static ArrayList<Chromosome> chromosomes; // built from user inputs
	
	// user inputs
	//private static HashMap<Weapon, Integer> weaponNumberMap; //<weapon , count>	
	
	private static HashMap<Integer , String> indexNameWeaponMap;
	private static HashMap<String , Integer> NameCountWeaponMap;
	
	
	private static HashMap<Integer, Integer> targetThreatMap; // <target name , target threatCoff>	
	private static ArrayList<ArrayList<Float>> probabilityMatrix; //[weapon ith name][target name]
	
	public static void initialize() // USER INPUTS
	{
		nIterations = 10;
		nPopulation = 10;
		nParents = 4;
		
		readInputs();
		buildChromosomes(); // initialize population randomly , evaluate fitness
	}
	
	private static void readInputs()
	{
		/*
		 * map indexNameWeapon
		 * map:
		 * [
		 * 	0:Tank
		 * 	1:Tank
		 * 	2:aircraft
		 * 	3:grenade
		 * 	4:grenade
		 * ]
		 * 
		 * map NameCountWeapon
		 * map:
		 * [
		 * 	Tank:2
		 * 	aircraft:1
		 * 	grenade:2
		 * ]
		 * 
		 */
		
		indexNameWeaponMap = new HashMap<Integer , String>();
		NameCountWeaponMap = new HashMap<String, Integer>();
		
		indexNameWeaponMap.put(0, "Tank");
		indexNameWeaponMap.put(1, "Tank");
		indexNameWeaponMap.put(2, "aircraft");
		indexNameWeaponMap.put(3, "grenade");
		indexNameWeaponMap.put(4, "grenade");
		
		NameCountWeaponMap.put("Tank", 2);
		NameCountWeaponMap.put("aircraft", 2);
		NameCountWeaponMap.put("grenade", 2);
		
		nTargets = 3;
		nWeapon = 5;
		nWeaponType = 3;
		
		targetThreatMap = new HashMap<Integer, Integer>();
		targetThreatMap.put(0, 16);
		targetThreatMap.put(1, 5);
		targetThreatMap.put(2, 10);
		
		probabilityMatrix = new ArrayList<ArrayList<Float>>();
		
		ArrayList<Float> prob1 = new ArrayList<Float>();
		prob1.add((float) 0.3);
		prob1.add((float) 0.6);
		prob1.add((float) 0.5);
		
		ArrayList<Float> prob2 = new ArrayList<Float>();
		prob2.add((float) 0.4);
		prob2.add((float) 0.5);
		prob2.add((float) 0.4);
		
		ArrayList<Float> prob3 = new ArrayList<Float>();
		prob3.add((float) 0.1);
		prob3.add((float) 0.2);
		prob3.add((float) 0.2);
		
		probabilityMatrix.add(prob1);
		probabilityMatrix.add(prob2);
		probabilityMatrix.add(prob3);
		
		System.out.println("Please wait while running the GA…");
	}
	
	
	private static void buildChromosomes() 
	{
		ArrayList<Gene> genes = new ArrayList<Gene>();
		
		
		chromosomes = new ArrayList<Chromosome>();
				
		for(int i = 0 ; i < nPopulation ; i++)
		{
			Random rand = new Random();
			ArrayList<Gene> genes = new ArrayList<Gene>();
			
			for(int weapon = 0 ; weapon < nWeapon ; weapon++)
			{
				int target = rand.nextInt(nTargets);
				genes.add(new Gene(target));	
			}
			
			Chromosome chromosome = new Chromosome(genes);
			System.out.println(chromosome.toString());
			chromosomes.add(chromosome);
		}	
	}

	/**
	 * @param weapon ith name
	 * @param target name
	 * @return success Probability
	 */
	public static float successProbability(int weapon , int target)
	{
		return probabilityMatrix.get(weapon).get(target);
	}
	
	/**
	 * @param targetName
	 * @return target's threat value
	 */
	public static float getTargetThreatValue(int targetName)
	{
		return targetThreatMap.get(targetName);
	}
	
	
	
	
}
